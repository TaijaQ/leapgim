// Generated by CoffeeScript 1.10.0
(function() {
  var FrameController, InputController, config, frameController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  config = require('.././config.json');

  InputController = (function() {
    function InputController() {
      this.parseGestures = bind(this.parseGestures, this);
      this.robot = require("robotjs");
    }

    InputController.prototype.parseGestures = function(frameModel) {
      var extendedFingers;
      extendedFingers = frameModel.extendedFingers;
      return console.log("Extended fingers: ", extendedFingers);
    };

    return InputController;

  })();

  FrameController = (function() {
    function FrameController() {
      this.processFrame = bind(this.processFrame, this);
      var extendedFingers, loopController;
      this.handModel = extendedFingers = {
        thumb: 0,
        indexFinger: 0,
        middleFinger: 0,
        ringerFinger: 0,
        pinky: 0
      };
      this.inputController = new InputController();
      this.Leap = require("leapjs");
      loopController = new this.Leap.Controller({
        inBrowser: false,
        enableGestures: true,
        frameEventName: 'deviceFrame',
        background: true,
        loopWhileDisconnected: false
      });
      loopController.connect();
      loopController.on('frame', this.processFrame);
    }

    FrameController.prototype.processFrame = function(frame) {
      var firstHand;
      this.frame = frame;
      if (!this.frame.valid) {
        return;
      }
      console.log("Processing frame...");
      if (this.frame.hands.length === 0) {
        console.log("No hands!");
        return;
      }
      firstHand = this.frame.hands[0];
      this.handModel.extendedFingers = this.extendedFingers = {
        thumb: firstHand.thumb.extended,
        indexFinger: firstHand.indexFinger.extended,
        middleFinger: firstHand.middleFinger.extended,
        ringerFinger: firstHand.ringFinger.extended,
        pinky: firstHand.pinky.extended
      };
      console.log("Frame succesfully processed");
      return this.inputController.parseGestures(this.handModel);
    };

    return FrameController;

  })();

  frameController = new FrameController();

}).call(this);
