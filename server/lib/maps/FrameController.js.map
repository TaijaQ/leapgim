{"version":3,"sources":["FrameController.coffee"],"names":[],"mappings":"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","file":"FrameController.js","sourceRoot":"/source/","sourcesContent":["{EventEmitter} = require 'events'\nLeap = require 'leapjs'\nzmq = require 'zmq'\nYAML = require 'yamljs'\n\nconfig = YAML.load 'etc/config.yml'\n\n# Frame controller recieves leap frame data from leapd and parses it into a\n# structured format we'll use later to configure gestures with\nclass FrameController extends EventEmitter\n\n    # A map to convert Finger type codes into descriptive names\n    nameMap : [\n        'thumb'\n        'indexFinger'\n        'middleFinger'\n        'ringFinger'\n        'pinky'\n    ]\n\n    constructor: ->\n        @model = []\n        console.log \"Frame Controller initialized\"\n\n    # TODO: return an array of pinching fingers if two fingers are both\n    # sufficiently close to the thumb.\n    findPinchingFingerType: (hand) =>\n        pincher = undefined\n        closest = 500\n        f = 1\n        while f < 5\n            current = hand.fingers[f]\n            distance = Leap.vec3.distance(hand.thumb.tipPosition, current.tipPosition)\n            if current != hand.thumb and distance < closest\n                closest = distance\n                pincher = current\n            f++\n        pincherName = @nameMap[pincher.type]\n        console.log \"Pincher type: \", pincher.type\n        console.log \"Pincher: \" + pincherName\n        return pincherName\n\n    ###\n    # Produce x and y coordinates for a leap pointable.\n    ###\n\n    relative3DPosition: (frame, leapPoint) ->\n        iBox = frame.interactionBox\n        normalizedPoint = iBox.normalizePoint(leapPoint, false)\n\n        # Translate coordinates so that origin is in the top left corner\n        x = normalizedPoint[0]\n        y = 1 - (normalizedPoint[1])\n        z = normalizedPoint[2]\n\n        # Clamp\n        if x < 0\n            x = 0\n        if x > 1\n            x = 1\n        if y < 0\n            y = 0\n        if y > 1\n            y = 1\n        if z < -1\n            z = -1\n        if z > 1\n            z = 1\n        {\n            x: x\n            y: y\n            z: z\n        }\n\n    processFrame: (frame) =>\n        console.log \"Processing frame...\"\n\n        if not frame.valid or frame.hands is null or frame.hands.length is 0\n            console.log \"Invalid frame or no hands detected\"\n        else\n\n            console.log \"Gestures: \", frame.gestures\n\n\n            @model =\n                hands : []\n                gestures : []\n                timestamp : frame.timestamp\n                #pointables : []\n            for hand in frame.hands\n                if(config.stabilize)\n                    console.log \"Stabilized position in use!\"\n                    position = hand.stabilizedPalmPosition\n                else\n                    position = hand.palmPosition\n                palmPosition = @relative3DPosition(frame, position)\n\n                pinchStrength = hand.pinchStrength\n                if pinchStrength > 0\n                    pinchingFinger = @findPinchingFingerType hand\n                else\n                    pinchingFinger = null\n\n                handModel =\n                    type : hand.type\n                    visible : hand.timeVisible\n                    confidence : hand.confidence\n                    extendedFingers:\n                        thumb : hand.thumb?.extended\n                        indexFinger : hand.indexFinger?.extended\n                        middleFinger : hand.middleFinger?.extended\n                        ringFinger : hand.ringFinger?.extended\n                        pinky : hand.pinky?.extended\n                    position: palmPosition\n                    grabStrength : hand.grabStrength\n                    pinchStrength : pinchStrength\n                    pinchingFinger : pinchingFinger\n                    speed : hand.palmVelocity\n                    pitch : hand.pitch\n                    roll  : hand.roll\n                    yaw : hand.yaw\n                    direction : hand.direction\n                @model.hands.push handModel\n\n            # # Basically fingers, but also pencils etc.\n            # for pointable of frame.pointables\n\n            #     if(config.stabilize)\n            #         fingerPosition = pointable.stabilizedTipPosition\n            #     else\n            #         fingerPosition = pointable.tipPosition\n            #         tipPosition = relative3DPosition(frame, fingerPosition)\n\n            #     pointableModel =\n            #         direction : pointable.direction\n            #         length : pointable.length\n            #         id : pointable.id\n            #         tool : pointable.tool\n            #         speed : pointable.tipVelocity\n            #     model.pointables.push pointableModel\n\n            # Gestures\n            for gesture in frame.gestures\n\n                if gesture.type is \"circle\"\n                    circleVector = frame.pointable(gesture.pointableIds[0]).direction\n\n                    console.log \"Circle vector\", circleVector\n                    console.log \"Cirlce normal\", gesture.normal\n\n                    gesture.direction = Leap.vec3.dot(circleVector, gesture.normal)\n\n                gestureModel =\n                    type : gesture.type\n                    duration : gesture.duration\n                    progress: gesture.progress\n                    state : gesture.state\n                    radius : gesture.radius\n                    center : gesture.center\n                    hands : gesture.handIds\n                    speed : gesture.speed\n                    startPosition : gesture.startPosition\n                    position : gesture.position\n                    direction : gesture.direction\n\n                @model.gestures.push gestureModel\n            @emit 'update', @model\n        console.log \"Processed frame: \", frame.id\n        return\n\n\n#\n# Socket\n#\nsocket = zmq.socket 'pub'\n# Register to monitoring events\nsocket.on 'connect', (fd, ep) ->\n    console.log 'connect, endpoint:', ep\n    return\nsocket.on 'connect_delay', (fd, ep) ->\n    console.log 'connect_delay, endpoint:', ep\n    return\nsocket.on 'connect_retry', (fd, ep) ->\n    console.log 'connect_retry, endpoint:', ep\n    return\nsocket.on 'listen', (fd, ep) ->\n    console.log 'listen, endpoint:', ep\n    return\nsocket.on 'bind_error', (fd, ep) ->\n    console.log 'bind_error, endpoint:', ep\n    return\nsocket.on 'accept', (fd, ep) ->\n    console.log 'accept, endpoint:', ep\n    return\nsocket.on 'accept_error', (fd, ep) ->\n    console.log 'accept_error, endpoint:', ep\n    return\nsocket.on 'close', (fd, ep) ->\n    console.log 'close, endpoint:', ep\n    return\nsocket.on 'close_error', (fd, ep) ->\n    console.log 'close_error, endpoint:', ep\n    return\nsocket.on 'disconnect', (fd, ep) ->\n    console.log 'disconnect, endpoint:', ep\n    return\nconsole.log 'Start monitoring...'\nsocket.monitor 500, 0\n\n\n# Config key: socket\nsocket.bindSync config.socket\n\nframeController = new FrameController\n\nframeController.on 'update', (model)->\n    console.log \"Frame Controller update\", model\n    socket.send [\n        'update'\n        JSON.stringify model\n    ]\n    return\n\n# Init Leap Motion\nleapController = new Leap.Controller (\n    inBrowser:              false,\n    enableGestures:         true,\n    frameEventName:         'deviceFrame',\n    background:             true,\n    loopWhileDisconnected:  false\n)\nconsole.log \"Connecting Leap Controller\"\nleapController.connect()\nconsole.log \"Leap Controller connected\"\n\nconsume = () ->\n    frame = leapController.frame()\n\n    # Skip invalid frame processing\n    if frame is null\n        return\n    frameController.processFrame(frame)\n    console.log \"Consumed frame \", frame.id\n\n# Config key: interval\nsetInterval consume, config.interval\n"]}