{
  "name": "robotjs",
  "version": "0.2.4",
  "description": "Node.js Desktop Automation.",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/octalmage/robotjs.git"
  },
  "keywords": [
    "Automation",
    "GUI",
    "mouse",
    "keyboard",
    "screenshot",
    "image",
    "pixel"
  ],
  "author": {
    "name": "Jason Stallings"
  },
  "license": "MIT",
  "gypfile": true,
  "bugs": {
    "url": "https://github.com/octalmage/robotjs/issues"
  },
  "homepage": "https://github.com/octalmage/robotjs",
  "dependencies": {
    "nan": "^1.3.0"
  },
  "devDependencies": {
    "tape": "^3.5.0"
  },
  "readme": "RobotJS\n========\n\n> Node.js Desktop Automation. Control the mouse, keyboard, and read the screen.\n\nRobotJS supports Mac, [Windows](https://github.com/octalmage/robotjs/issues/2), and [Linux](https://github.com/octalmage/robotjs/issues/17).\n\nThis is a work in progress so the exported functions could change at any time before the first stable release (1.0.0). [Ideas?](https://github.com/octalmage/robotjs/issues/4)\n\n[Check out some of the cool things people are making with  RobotJS](https://github.com/octalmage/robotjs/wiki/Projects-using-RobotJS)! Have your own rad RobotJS project? Feel free to add it!\n\n[![npm version](https://img.shields.io/npm/v/robotjs.svg)](https://www.npmjs.com/package/robotjs) [![Build Status](https://api.travis-ci.org/octalmage/robotjs.svg?branch=master)](https://travis-ci.org/octalmage/robotjs) [![Ready](https://badge.waffle.io/octalmage/robotjs.svg?label=ready&title=Ready)](http://waffle.io/octalmage/robotjs) [![Join the chat at https://gitter.im/octalmage/robotjs](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/octalmage/robotjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Installing\n\nPlease make sure you have the [required dependencies](https://github.com/TooTallNate/node-gyp/#installation) before installing:\n\n* Windows\n  * Visual Studio 2013 (Express works fine).\n  * Python (v2.7.3 recommended, v3.x.x is not supported).\n* Mac\n  * Xcode Command Line Tools.\n* Linux\n  * Python (v2.7 recommended, v3.x.x is not supported).\n  * make.\n  * A C/C++ compiler like GCC.\n  * libxtst-dev and libpng++-dev (`sudo apt-get install libxtst-dev libpng++-dev`).\n\nThen install RobotJS using npm:\n\n```\nnpm install robotjs\n```\nI [plan on](https://github.com/octalmage/robotjs/issues/64) using node-pre-gyp to make this process easier.\n\n## Examples\nGet the mouse position, move it, then click.\n\n```JavaScript\nvar robot = require(\"robotjs\");\n\n//Get the mouse position, returns an object with x and y. \nvar mouse = robot.getMousePos();\nconsole.log(\"Mouse is at x:\" + mouse.x + \" y:\" + mouse.y);\n\n//Move the mouse down by 100 pixels.\nrobot.moveMouse(mouse.x, mouse.y + 100);\n\n//Left click!\nrobot.mouseClick();\n```\n\nType \"Hello World\" then press enter.\n\n```JavaScript\nvar robot = require(\"robotjs\");\n\n//Type \"Hello World\".\nrobot.typeString(\"Hello World\");\n\n//Press enter. \nrobot.keyTap(\"enter\");\n```\nGet pixel color under the mouse. \n\n```JavaScript\nvar robot = require(\"robotjs\");\n\n//Get mouse position. \nvar mouse = robot.getMousePos();\n\n//Get pixel color in hex format. \nvar hex = robot.getPixelColor(mouse.x, mouse.y);\nconsole.log(\"#\" + hex + \" at x:\" + mouse.x + \" y:\" + mouse.y);\n```\n\nRead the [Wiki](https://github.com/octalmage/robotjs/wiki) for more information!\n\n## Building\n\nnode-gyp is required to build RobotJS.\n\nInstall node-gyp using npm:\n\n```\nnpm install -g node-gyp\n```\n\nThen configure and build: \n\n```\nnode-gyp configure\nnode-gyp build\n```\n\n## Plans\n\n* Control the mouse by changing the mouse position, left/right clicking, and dragging. \n* Control the keyboard by pressing keys, holding keys down, and typing words.\n* Read pixel color from the screen and capture the screen. \n* Find image on screen, read pixels from image.\n* Possibly include window management? \n\n## Progress\n\n| Module        | Status        | Notes   |\n| ------------- |-------------: | ------- |\n| Mouse         | 100%           | All planned features implemented.       |\n| Keyboard      | 100%           | All planned features implemented.       |\n| Screen        | 10%            | Screenshot, image search.   |\n\n## Story\n\nI'm a huge fan of [AutoHotkey](http://www.autohotkey.com/), and I've used it for a very long time. AutoHotkey is great for automation and it can do a bunch of things that are very difficult in other languages. For example, it's [imagesearch](https://www.autohotkey.com/docs/commands/ImageSearch.htm) and [pixel](https://www.autohotkey.com/docs/commands/PixelGetColor.htm) related functions are hard to reproduce on Mac, especially in scripting languages. These functions are great for automating apps that can't be automated like [Netflix](http://blueshirtdesign.com/apps/autoflix/). This has never been a big deal since I've always used Windows at work, but for the past few years I've been using Mac exclusively. \n\nI like AutoHotkey, but I like Node.js more. By developing RobotJS I get an AutoHotkey replacement on Mac (finally!), and I get to use my favorite language. \n\n**TLDR:** There's nothing like AutoHotkey on Mac, so I'm making it. \n\n## License\n\nMIT\n\nBased on [autopy](https://github.com/msanders/autopy). \nMaintained by [Jason Stallings](http://jason.stallin.gs).\n",
  "readmeFilename": "README.md",
  "_id": "robotjs@0.2.4",
  "_from": "robotjs@latest"
}
